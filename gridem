#!/bin/bash

# Optionally open multiple gnome terminals, ssh to each.
# Then size and position the the gnome terminals in a grid
# (defaults 2x2).  Supports multiple monitors and desktops.
#
# possible enhancements:
# * support multiple terminal launchings for a given profile.
#
# Roy

#set -x

# A slicker error handling routine

# The variable PROGNAME holds the name of the program being run.
# You can get this value from the first item on the command line ($0).

PROGNAME=$(basename $0)

error()
{

#	----------------------------------------------------------------
#	Function for exit due to non-fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------

	echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
}

error_exit()
{

#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------

	echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
	exit 1
}

# Example call of the error_exit function.  Note the inclusion
# of the LINENO environment variable.  It contains the current
# line number.
#
# echo "Example of error with line number and message"
# error_exit "$LINENO: An error has occurred."

usage="$(basename "$0") [-h|--help] [-c|--columns N] [-r|--rows N] [-a|--all] [-t|--title NAME...]
                        [-d|--desktop N] [-v|--verbose] [--{PROFILE}={HOST}...] [HOST...]

where:
    -h|--help           show this help text
    -c|--columns N      arrange terminals in the given number of columns per monitor.
    -r|--rows N         arrange terminals in the given number of rows per monitor.
    -a|--all            arrange all the terminals into the grid.
    -t|--title NAME     arrange terminals that start with the given NAME into the grid.
    -d|--desktop N      start arranging on desktop N.
    -v|--verbose        output extra information.
    --{PROFILE}={HOST}  open a new gnome-terminal using the PROFILE, ssh to HOST.
                        Multiple occurrences allowed.
    HOST                open a new gnome-terminal using default profile, ssh to HOST.
                        Multiple occurrences allowed.
"

# initialize

rcfile=$HOME/.gridemrc

if [ -e ${rcfile} ]; then
    source ${rcfile}
fi

#declare -a titles

# variables that may be defined in the rc file:
user="${user:-$USER}"
domain="${domain:-}"
ssh_options="${ssh_options:- -C -o TCPKeepAlive=yes -o ServerAliveInterval=30}"
titles="${titles:-()}"

columns=${columns:-2}
rows=${rows:-2}

border_top=${border_top:-20}
border_bottom=${border_bottom:-20}
border_left=${border_left:-0}
border_right=${border_right:-0}

xoffset=${xoffset:-0};
yoffset=${yoffset:-20};  # approximately the title bar height

# default to gnome terminals
window_class=${window_class:-"gnome-terminal"}
launch_cmd_line=${launch_cmd_line:-'gnome-terminal ${profile_parameter} -- ssh ${ssh_options} ${user}@${host}.${domain}'}

argument_default_profile=${argument_default_profile:-'--window'}
argument_use_profile=${argument_use_profile:-'--window-with-profile=${profile}'}

# environmental variables

monitors=$(xrandr -d :0 -q | grep ' connected' | wc -l) || error_exit "${LINENO}: can not get number of monitors"
monitor_width=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1) || error_exit "${LINENO}: can not get monitor width"
monitor_height=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f2) || error_exit "${LINENO}: can not get monitor height"
display_dimensions=$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/') || error_exit "${LINENO}: can not get display dimensions"
display_width=$(echo ${display_dimensions} | sed -r 's/x.*//')
display_height=$(echo ${display_dimensions} | sed -r 's/.*x//')

number_of_desktops=$(xdotool get_num_desktops) || error_exit "${LINENO}: can not get number of desktops"
current_desktop=$(xdotool get_desktop) || error_exit "${LINENO}: can not get the current desktop"

all=false
verbose=false

# parse command line

declare -A hosts
while [[ $# -gt 0 ]]
do
key="$1"
case ${key} in
    -h|--help)
    echo "${usage}"
    exit 0;
    shift # past argument
    ;;
    -c|--columns)
    columns="$2"
    shift # past argument
    shift # past value
    ;;
    -r|--rows)
    rows="$2"
    shift # past argument
    shift # past value
    ;;
    -a|--all)
    all=true;
    shift # past argument
    ;;
    -t|--title)
    titles+=("$2")
    shift # past argument
    shift # past value
    ;;
    -d|--desktop)
    (( desktop="$2" - 1 ))
    shift # past argument
    shift # past value
    ;;
    -v|--verbose)
    verbose=true;
    shift # past argument
    ;;
    --*=*)
    profile=$( expr match "$1" '--\(.*\)=\(.*\)' )
    host=$( expr match "$1" '--.*=\(.*\)' )
    hosts+=( ["$host"]="$profile" )
    shift # past argument
    ;;
    *)    # unknown options
    hosts+=( ["$1"]="" )
    shift # past argument
    ;;
esac
done
set -- "${!hosts[@]}"  # restore positional parameters

# calculated constants
desktop=${desktop:-${current_desktop}}

width="$(( ( $display_width - ( $border_left + $border_right ) ) / ( $columns * $monitors ) ))"
height="$(( ( $display_height - ( $rows * ( $border_top + $border_bottom ) ) ) / $rows ))"
((xincr=$width+$xoffset));
((yincr=$height+$yoffset));

# the hosts dictionary's keys are host names to ssh to in new windows and
# the values are either empty string or a profile name
#
# iterate hosts keys and open new windows with ssh connection to the host
# use the terminal profile if it is not empty

IFS=$'\n' sorted=($(sort <<<"${!hosts[*]}"));
unset IFS
for host in "${sorted[@]}"; do
    profile=${hosts[$host]}
    profile_parameter=$(eval echo ${argument_use_profile})
    if [[ -z ${profile// } ]]; then
        profile_parameter=$(eval echo ${argument_default_profile})
    fi
    if [ "$verbose" = true ]; then
        eval echo ${launch_cmd_line}
    fi
    eval ${launch_cmd_line} || error_exit "${LINENO}: can not launch command using: ${launch_cmd_line}"
done

# now we need to resize and reposition all of the gnome-terminal windows
#
# The display consists of desktops, monitors, and windows.  We place the windows in a grid
# across the monitors.  The grid on a monitory is rows by columns.  The windows are sized to
# fit within the grid.  Also all of the windows are raised to be visible.
#
# TDB handle desktops

r=0
c=0
m=0
d=${desktop}

function nameInTitles {
  local n="$1"

  for title in "${titles[@]}"; do
      if [[ "${n}" =~ "$title" ]]; then
          return 0  # true
      fi
  done
  return 1  # false
}

declare -a pids
dt=0
while [ ${dt} -lt ${number_of_desktops} ]; do
    declare -a d_pids=$(xdotool search --desktop ${dt} -class ${window_class}) || error_exit "${LINENO}: can not find open windows"
    pids+=("${d_pids[@]}")
    (( dt=dt+1 ))
done

IFS=$'\n' sorted=($(sort <<<"${pids[*]}"));
unset IFS
for pid in "${sorted[@]}"; do
    name=$(xdotool getwindowname ${pid})
    if [ "$?" -ne "0" ]; then
        error "${LINENO}: can not get window name"
    else
        if "$all" = true || nameInTitles ${name}; then
    #        echo "c: $c  r: $r  m: $m  d: $d"
            ((x= ( ${c} * ${xincr} ) + ${border_left} + ( ${m} * ${monitor_width}) ))
            ((y= ( ${r} * ${yincr}) + ${border_top} ))
            xdotool set_desktop_for_window ${pid} ${d} || error_exit "${LINENO}: can not set desktop for window"
            xdotool windowsize ${pid} ${width} ${height} || error_exit "${LINENO}: can not set window size"
            xdotool windowmove --sync ${pid} ${x} ${y} || error_exit "${LINENO}: can not move window"
            xdotool windowactivate ${pid} || error_exit "${LINENO}: can not activate window"
            ((c = ${c} + 1))
            if [ "${c}" -ge "${columns}" ]; then
                c=0;
                ((r=$r + 1))
                if [ "${r}" -ge "${rows}" ]; then
                    r=0;
                    ((m=$m + 1))
                    if [ "${m}" -ge "${monitors}" ]; then
                        m=0
                        ((d=$d + 1))
                        if [ "${d}" -ge "${number_of_desktops}" ]; then
                            d=0
                        fi
                    fi
                fi
            fi
        fi
    fi
done
